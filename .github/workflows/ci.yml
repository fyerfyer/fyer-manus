name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  GO_VERSION: '1.23' 
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 代码质量检查
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('go-api/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          cd go-api
          go mod download
          go mod tidy

      - name: Run go vet
        run: |
          cd go-api
          go vet ./...

      - name: Check formatting
        run: |
          cd go-api
          if [ "$(gofmt -l . | wc -l)" -gt 0 ]; then
            echo "Code is not properly formatted"
            gofmt -l .
            exit 1
          fi

      - name: Test build
        run: |
          cd go-api
          go build -v ./...

  # 单元测试
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ai_agent_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('go-api/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install Redis CLI and postgresql-client
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-tools postgresql-client

      - name: Create .env file for testing
        run: |
          cd go-api
          cp ../.env.example .env
          # 设置测试环境变量
          echo "DB_HOST=localhost" >> .env
          echo "DB_PORT=5432" >> .env
          echo "DB_USER=postgres" >> .env
          echo "DB_PASSWORD=postgres" >> .env
          echo "DB_NAME=ai_agent_test" >> .env
          echo "REDIS_ADDR=localhost:6379" >> .env
          echo "JWT_SECRET=test-secret-key-for-ci-pipeline-256-bits-long" >> .env

      - name: Install dependencies
        run: |
          cd go-api
          go mod download

      - name: Install golang-migrate
        run: |
          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.16.2/migrate.linux-amd64.tar.gz | tar xvz
          sudo mv migrate /usr/local/bin/

      - name: Wait for services
        run: |
          echo "Waiting for PostgreSQL..."
          timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'
          echo "PostgreSQL is ready!"
          
          echo "Waiting for Redis..."
          timeout 30 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'
          echo "Redis is ready!"

      - name: Run database migrations
        run: |
          migrate -path ./go-api/migrations -database "postgres://postgres:postgres@localhost:5432/ai_agent_test?sslmode=disable" up

      - name: Run tests
        run: |
          cd go-api
          go test -v -race -coverprofile=coverage.out ./...

      - name: Generate coverage report
        run: |
          cd go-api
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            go-api/coverage.out
            go-api/coverage.html

  # 构建检查
  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('go-api/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Create .env file for build
        run: |
          cp .env.example .env

      - name: Build application
        run: |
          cd go-api
          CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o ../bin/fyer-manus-api ./cmd

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: bin/

  # Docker镜像测试
  docker-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file for docker
        run: |
          cp .env.example .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./go-api/Dockerfile
          push: false
          tags: fyer-manus-api:test

      - name: Test Docker Compose
        run: |
          cp .env.example .env
          # 使用docker compose而不是docker-compose
          docker compose -f docker-compose.dev.yml up -d postgres redis
          sleep 10
          docker compose -f docker-compose.dev.yml --profile api up -d
          sleep 5
          # 测试健康检查
          curl -f http://localhost:8080/health || exit 1
          docker compose -f docker-compose.dev.yml down

  # Docker构建和推送 (仅主分支)
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [docker-test]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          cp .env.example .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./go-api/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max